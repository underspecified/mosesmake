#!/usr/local/plan9/bin/rc

fn moses_eval_setup {
	if (! 9 test -s $eval_in_fact) {
		moses_process_data $eval_in_stem $src
	}

	if (! 9 test -s $eval_ref_fact) {
		moses_process_data $eval_ref_stem $tgt
	}

	if (! 9 test -s $recaser_dir/moses.ini) {
		echo -n Training recaser ...
		train-recaser.perl -train-script /usr/bin/train-factored-phrase-model.perl -ngram-count /usr/bin/ngram-count -corpus $lm_stem.tok -dir $recaser_dir
		echo done.
	}
}

fn moses_dev_test {
	input = $1
	out = $2
	emdir = $3
	ini = $4

	switch($factors){
		case factorless pos pos-gen
			suf = tok
		case *
			suf = lc
	}

	if (! 9 test -s $emdir/moses.ini) {
		echo -n Filtering model to fit in memory ...
		rm -rf $emdir
		filter-model-given-input.pl $emdir $ini $input.lc
		echo done.
	}
	
	if (! 9 test -s $out) {
		echo -n Decoding with Moses ...
		moses -config $emdir/moses.ini -input-file $input.$suf > $out.fact
		moses_fact2tok < $out.fact > $out
		echo done.
	}
	
	if (! 9 test -s $out.rc) {
		echo -n Recasing output ...
		moses_recase $out > $out.rc
		echo done.
	}
	
	if (! 9 test -s $out.detok) {
		echo -n Detokenizing output ...
		moses_detokenize $tgt < $out.rc > $out.detok
		echo done.
	}
}

fn moses_recase {
	recase.perl -model $recaser_dir/moses.ini -in $1 -moses /usr/bin/moses
}

fn moses_detokenize {
	detokenizer.perl -l $1
}

fn moses_bleu {
	cp -f $1 $1.0
	multi-bleu.perl $1 < $2
}

fn moses_eval {
	out = $1
	ref = $2
	if (~ $#* 3) {
		base = $3
	}

	echo -n Calculating $mert Bleu score ...
	moses_bleu $ref $out.detok > $out.bleu
	echo done.
	cat $out.bleu
	
	if (9 test -s $base) {
#		echo -n Calculating statistical significance against $base ...
		moses_eval_sig $out.detok $base $ref | 
		tee $out.sig
#		echo done.
	}
}

fn usage {
	echo 'usage: moses_evaluate [-s|--src en|es|ja] [-t|--tgt en|es|ja] [-r|--root <root_dir>] [-c|--corpus <corpus_name>] [-l|--lm-corpus <lm_corpus_file>] [-f|--factors <factors>] [-b|--baseline <baseline_output>] [-m|--mert]'  >[1=2]
}

if (! ~ $#* 0) {
	has_args = true
}

mert = no_mert
while (~ $1 -*) {
	switch($1) {
		case -b --baseline
			baseline = $2
			shift 2
		case -c --corpus
			corpus = $2
			shift 2
		case -f --factors
			factors = $2
			shift 2
		case -l --lm-corpus
			lm_corpus = $2
			shift 2
		case -m --mert
			mert = mert
			shift 1
		case -r --root
			root = $2
			shift 2
		case -s --src
			src = $2
			shift 2			
		case -t --tgt
			tgt = $2
			shift 2
		case *
			echo malformed flag $1 ! >[1=2]
			usage
			exit 1
	}
}

if (~ $factors '') {
	factors = factorless

}

if (~ $src '' || ~ $tgt '' || ~ $corpus '' || ~ $lm_corpus '' || ~ $factors '' || ~ $root '') {
	echo '$src, $tgt, $corpus, $lm_corpus, $factors, and $root must be set!' >[1=2]
	usage
	exit 1
}
if not {
	if (! ~ $has_args '') . $MHOME/env/moses.env
	if (~ $mert 'mert') {
		moses_eval_setup
		moses_dev_test $eval_in_stem $eval_out_stem $eval_model_dir $tuning_dir/moses.ini
		moses_eval $eval_out_stem $eval_ref_stem $baseline
	}
	if not {
		moses_eval_setup
		moses_dev_test $eval_in_stem $eval_out_stem.no_mert \
					   $eval_model_dir.no_mert $model_dir/moses.ini
		nmb = `{echo $baseline | sed -r 's/.([^.]+)$/.no_mert.\1/g'}
		moses_eval $eval_out_stem.no_mert $eval_ref_stem $nmb
	}
}
